============
Case studies
============

.. note:: Make sure `PyDIAR <https://pypi.python.org/pypi/PyDAIR>`_
          and `NCBI BLAST+ <https://www.ncbi.nlm.nih.gov/books/NBK279690/>`_
          have been already installed.




Simulation study with Joinsim dataset
=====================================


The simulation study set is available on
`GitHub PyDAIR repository <https://github.com/bioinfoteam/PyDAIR>`_.
The study set consists of artificial IgH sequences,
human germline gene databases,
and the scripts that are used in simulation study,
Users can download the study set via :command:`git clone` command
with terminal on Linux or Mac OS systems.
The simulation data were generated by HTJoinSimulation\ [#Russ2015]_.

.. code-block:: bash
    
    git clone git@github.com:bioinfoteam/PyDAIR.git


The data are saved in :file:`PyDAIR/casestudies/joinsim` of the downloaded directory.
We use :command:`cd` command to go to :file:`joinsim` directory,
and decompress the data using :command:`gunzip` command.


.. code-block:: bash
    
    cd PyDAIR/casestudies/joinsim
    gunzip data/joinsim.txt.gzip




Preparation
^^^^^^^^^^^


Before analysis, we create BLAST database using human germline gene sequences via makeblastdb.
The artificial sequences obtained from JoinSimulation, are saved at data/joinsim.txt directory in TSV format. We first extract ORFs and create a subset to data/joinsim.sub.txt. Then, we convert the whole data set and subset data into FASTA files.


Before analysis, we create BLAST database with human
germline gene sequences using :command:`makeblastdb`.


.. code-block:: bash
    
    cd db
    makeblastdb -in human.ighv.fa -out vdb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighd.fa -out ddb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighj.fa -out jdb -dbtype nucl -parse_seqids
    cd ../


The artificial sequences obtained from JoinSimulation,
is saved in :file:`data/joinsim.txt` directory with TSV format.
We first extract sequences with ORF from whole data set
to create a subset,
and save them to :file:`data/joinsim.sub.txt`.
Then, we convert the whole data set and subset into FASTA format file.


.. code-block:: bash
    
    grep -v "out of frame" data/joinsim.txt | grep -v "stop codon"  > data/joinsim.sub.txt
    python ./bin/convert_csv_to_fastq.py ./data/joinsim.txt ./data/joinsim.fa
    python ./bin/convert_csv_to_fastq.py ./data/joinsim.sub.txt ./data/joinsim.sub.fa






Analysis
^^^^^^^^

pydair parse performs the key functions of the package, as it assigns VDJ gene sequences and determines CDR3 regions from the whole data set and subset data, respectively.
The original Python script was then used to calculate the accuracy rate of assigned sequences. 
Calculation results are saved into joinsim.stats.txt for whole data set, and joinsim.sub.stats.txt for subset data.
Finally, pydair stats was used to create the TSV files that contain usage frequencies of VDJ genes, and the size distribution of CDR3, and summarize them into a HTML report (stats_report.html).
)


We use :command:`pydair parse` command to assign VDJ genes,
and determine CDR3 sequences for whole data set and subset, respectively.


.. code-block:: bash
    
    pydair parse -s human -q data/joinsim.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o results/joinsim
    
    pydair parse -s human -q data/joinsim.sub.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o results/joinsim.sub


Then, we use the original Python scripts to calculate
the number of sequences that are correctly and incorrectly asssigned.


.. code-block:: bash
    
    python ./bin/calc_accuracy.py ./data/joinsim.txt \
                                  ./results/joinsim.vdj.pydair.simple \
                                  ./results/joinsim.stats.txt
    
    python ./bin/calc_accuracy.py ./data/joinsim.sub.txt \
                                  ./results/joinsim.sub.vdj.pydair.simple \
                                  ./results/joinsim.sub.stats.txt


The calculation results are saved into 
:file:`joinsim.stats.txt` for whole data set,
and :file:`joinsim.sub.stats.txt` for subset.

Finally, we use :command:`pydair stats` commands to create
the TSV files that contained V, D and J usage frequencies,
and the distribution of CDR3 length,
and summarize them into HTML report (:file:`stats_report.html`).



.. code-block:: bash
    
    pydair stats -i ./results/joinsim.vdj.pydair ./results/joinsim.sub.vdj.pydair \
                 -n whole_data subset \
                 -o ./results/stats \
                 --contain_ambiguous_D \
                 --estimate-vdj-combination










Analysis of human HIV-1-neutralizing antibodies
===============================================

.. note:: To perform analysis from FASTQ file, one may need to install 
          `NCBI SRA Toolkit <https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software>`_
          and `Trimmomatic <http://www.usadellab.org/cms/?page=trimmomatic>`_.



We show the precedures for repertoire diversity study of
human immunoglobulin heavy (IgH) chains from B cell with PyDAIR.
The IgH sequences were sequenced from the two donors IVAI84 and N152 using 454 pyrosequencing
in\ [#Zhu2013]_.
IgH sequence in IAVI84 donor is broadly contained neutralizing antibodies,
and N152 is the brodly neutralizing antibody 10E8 was recently identified in HIV-1-infected donor.


First, we use :command:`git clone` command to download
the case study set that consists of
human germline genes in FASTA format from
`GitHub PyDAIR repository <https://github.com/bioinfoteam/PyDAIR>`_.


.. code-block:: bash
    
    git clone git@github.com:bioinfoteam/PyDAIR.git


The data are saved in :file:`PyDAIR/casestudies/hiv`.
We use :command:`cd` command to go to :file:`hiv` directory.


.. code-block:: bash
    
    cd PyDAIR/casestudies/hiv



Preparation
^^^^^^^^^^^


Before analysis, we create BLAST database with human
germline gene sequences using :command:`makeblastdb`.


.. code-block:: bash
    
    cd db
    makeblastdb -in human.ighv.fa -out vdb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighd.fa -out ddb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighj.fa -out jdb -dbtype nucl -parse_seqids
    cd ../


The IgH sequencing data for the two donors are available on
`NCBI SRA <www.ncbi.nlm.nih.gov/sra>`_ with the accession number of SRR654171 and SRR654169.
We use 
`NCBI SRA Toolkit <https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software>`_
to downlaod Rep-Seq data and covert them to FASTQ format file.

.. code-block:: bash
    
    prefetch SRR654171
    prefetch SRR654169
    fastq-dump SRR654171 -O ./data/
    fastq-dump SRR654169 -O ./data/


High-throughput sequencing data generally contains low qualities reads.
We use 
`Trimmomatic <http://www.usadellab.org/cms/?page=trimmomatic>`_
to removed the low quality reads.


.. code-block:: bash
    
    fastqc ./data/SRR654171.fastq -o ./data/ -q --nogroup
    fastqc ./data/SRR654169.fastq -o ./data/ -q --nogroup
    
    trimmomatic SE -phred33 ./data/SRR654171.fastq ./data/SRR654171.qc.fastq HEADCROP:10 TRAILING:20 MINLEN:100
    trimmomatic SE -phred33 ./data/SRR654169.fastq ./data/SRR654169.qc.fastq HEADCROP:10 TRAILING:20 MINLEN:100
    
    fastqc ./data/SRR654171.qc.fastq -o ./data/ -q --nogroup
    fastqc ./data/SRR654169.qc.fastq -o ./data/ -q --nogroup


After trimming of low quality bases and removing low short sequences,
we convert FASTQ format file to FASTA format file
with :command:`awk` and "command:`sed` commands.


.. code-block:: bash
    
    awk 'NR % 4 == 1 || NR % 4 == 2' ./data/SRR654171.fastq | sed -e 's/^@/\>/' > ./data/SRR654171.fa
    awk 'NR % 4 == 1 || NR % 4 == 2' ./data/SRR654169.fastq | sed -e 's/^@/\>/' > ./data/SRR654169.fa





Analysis
^^^^^^^^

As mentioned above, pydair parse was used to assign VDJ genes and define CDR3 sequences. Analysis results were summarized via pydair stats. All the summarized data are saved into results directory with prefix stats.

We use :command:`pydair parse` command to assign VDJ genes and determine CDR3 sequence.


.. code-block:: bash
    
    pydair parse -s human -q ./data/SRR654169.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o ./results/SRR654171
    pydair parse -s human -q ./data/SRR654169.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o ./results/SRR654169


Then, we use :command:`pydair stats` command to summarize the analysis results.
All summarized data are saved into :file:`results` directory with prefix `stats`.


.. code-block:: bash
    
    pydair stats -i ./results/SRR654171.vdj.pydair ./results/SRR654169.vdj.pydair \
                 -n N152 TIAVI84 \
                 -o ./results/stats \
                 --contain_ambiguous_D \
                 --estimate-vdj-combination




References
==========

.. [#Russ2015] Russ DE, Ho KY2, Longo NS3. HTJoinSolver: Human immunoglobulin VDJ partitioning using approximate dynamic programming constrained by conserved motifs. *BMC Bioinformatics* 2015, **16**\ :170. doi: `10.1186/s12859-015-0589-x <https://dx.doi.org/10.1186/s12859-015-0589-x>`_.
.. [#Zhu2013] Zhu J, Ofek G, Yang Y, Zhang B, Louder MK, Lu G, McKee K, Pancera M, Skinner J, Zhang Z, Parks R, Eudailey J, Lloyd KE, Blinn J, Alam SM, Haynes BF, Simek M, Burton DR, Koff WC; NISC Comparative Sequencing Program, Mullikin JC, Mascola JR, Shapiro L, Kwong PD. Mining the antibodyome for HIV-1-neutralizing antibodies with next-generation sequencing and phylogenetic pairing of heavy/light chains. *Proc Natl Acad Sci U S A*. 2013, **110**\ (16):6470-5. doi: `10.1073/pnas.1219320110 <https://dx.doi.org/10.1073/pnas.1219320110>`_.



