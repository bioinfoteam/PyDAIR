
============
Case studies
============




Analysis of artificial IgH sequences of human
=============================================

The simulation study set is available on
`GitHub PyDAIR repository <https://github.com/bioinfoteam/PyDAIR>`_.
The study set consists of artificial IgH sequences,
human germline gene databases,
and the scripts that are used to evaluate simulation results.
Users can download the study set via :command:`git clone` command with terminal.
The artificial data were generated by HTJoinSimulation\ [#Russ2015]_.

.. code-block:: bash
    
    git clone git@github.com:bioinfoteam/PyDAIR.git


The data are saved in :file:`PyDAIR/casestudies/simdata` of the downloaded directory.
We use :command:`cd` command to go to :file:`simdata` directory,
and decompress the data using :command:`bzip2` command with :command:`-d` option.


.. code-block:: bash
    
    cd PyDAIR/casestudies/simdata
    bzip2 -d data/simdata.txt.bz2




Preparation
^^^^^^^^^^^


Before analysis, we create BLAST database with human
immunoglobulin gene sequences using :command:`makeblastdb` command.


.. code-block:: bash
    
    cd db
    makeblastdb -in human.ighv.fa -out vdb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighd.fa -out ddb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighj.fa -out jdb -dbtype nucl -parse_seqids
    cd ../


The artificial sequences are saved in :file:`data/simdata.txt` directory with TSV format.
We convert the TSV format file into a FASTA format file with a custom Python script.


.. code-block:: bash
    
    python ./bin/convert_csv_to_fastq.py ./data/simdata.txt ./data/simdata.fa

..  
    grep -v "out of frame" data/simdata.txt | grep -v "stop codon"  > data/simdata.sub.txt
    python ./bin/convert_csv_to_fastq.py ./data/simdata.sub.txt ./data/simdata.sub.fa
    



Analysis
^^^^^^^^

We use :command:`pydair parse` command to assign VDJ genes and determine CDR3 sequences.
The parsed results will be saved in :file:`results` with :file:`simdata` prefix.

.. code-block:: bash
    
    pydair parse -q data/simdata.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o results/simdata


..     
    pydair parse -q data/simdata.sub.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o results/simdata.sub



Then, we use the original Python scripts to calculate
the percentage of correctly and incorrectly identification.
The calculation result wil be saved into :file:`simdata.stats.txt`.


.. code-block:: bash
    
    python ./bin/calc_accuracy.py ./data/simdata.txt \
                                  ./results/simdata.vdj.pydair.simple \
                                  ./results/simdata.stats.txt
    
..  
    python ./bin/calc_cdr3len_d.py ./data/simdata.txt \
                                  ./results/simdata.vdj.pydair.simple \
                                  ./results/simdata.unaligned.fa \
                                  ./results/simdata.dstats.txt
    
    python ./bin/calc_accuracy.py ./data/simdata.sub.txt \
                                  ./results/simdata.sub.vdj.pydair.simple \
                                  ./results/simdata.sub.stats.txt
    
    python ./bin/calc_cdr3len_d.py ./data/simdata.sub.txt \
                                  ./results/simdata.sub.vdj.pydair.simple \
                                  ./results/simdata.sub.unaligned.fa \
                                  ./results/simdata.sub.dstats.txt
    
    
    
    


Finally, we use :command:`pydair stats` commands to create
the TSV files that contained V, D and J usage frequencies,
and the distribution of CDR3 length,
and summarize them into HTML report (:download:`simdata_report.html`).


.. code-block:: bash
    
    pydair stats -i ./results/simdata.vdj.pydair \
                 -n simdata \
                 -o ./results/stats \
                 --contain_ambiguous_D \
                 --all_seq \
                 --estimate-vdj-combination
    







Analysis of human HIV-1-neutralizing antibodies
===============================================

.. note:: To perform analysis from FASTQ file, one may need to install 
          `NCBI SRA Toolkit <https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software>`_
          and `Trimmomatic <http://www.usadellab.org/cms/?page=trimmomatic>`_.



We show the precedures for repertoire diversity study of
human immunoglobulin heavy (IgH) chains from B cell with PyDAIR.
The IgH sequences were sequenced from the two donors IVAI84 and N152 using 454 pyrosequencing
in\ [#Zhu2013]_.
IgH sequence in IAVI84 donor is broadly contained neutralizing antibodies,
and N152 is the brodly neutralizing antibody 10E8 was recently identified in HIV-1-infected donor.


First, we use :command:`git clone` command to download
the case study set that consists of
human germline genes in FASTA format from
`GitHub PyDAIR repository <https://github.com/bioinfoteam/PyDAIR>`_.


.. code-block:: bash
    
    git clone git@github.com:bioinfoteam/PyDAIR.git


The data are saved in :file:`PyDAIR/casestudies/hiv`.
We use :command:`cd` command to go to :file:`hiv` directory.


.. code-block:: bash
    
    cd PyDAIR/casestudies/hiv



Preparation
^^^^^^^^^^^


Before analysis, we create BLAST database with human
germline gene sequences using :command:`makeblastdb`.


.. code-block:: bash
    
    cd db
    makeblastdb -in human.ighv.fa -out vdb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighd.fa -out ddb -dbtype nucl -parse_seqids
    makeblastdb -in human.ighj.fa -out jdb -dbtype nucl -parse_seqids
    cd ../


The IgH sequencing data for the two donors are available on
`NCBI SRA <www.ncbi.nlm.nih.gov/sra>`_ with the accession number of SRR654169 and SRR654171,
while SRR654169 is sequenced from IAVI84 donor
and SRR654171 is sequenced from N152 donor.
We use 
`NCBI SRA Toolkit <https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software>`_
to downlaod Rep-Seq data and covert them to FASTQ format file.

.. code-block:: bash
    
    prefetch SRR654169
    prefetch SRR654171
    fastq-dump SRR654169 -O ./data/
    fastq-dump SRR654171 -O ./data/

Both FASTQ files contain IgH and IgL sequences.
We use `cutadapt <http://cutadapt.readthedocs.io/en/stable/index.html>_`
to extract the IgH sequences according to the primers.

.. code-block:: bash
    
    cutadapt -g VH15L=CCATCTCATCCCTGCGTGTCTCCGACTCAGACAGGTGCCCACTCCCAGGTGCAG \
             -g VH15L2=CCATCTCATCCCTGCGTGTCTCCGACTCAGGCAGCCACAGGTGCCCACTCC \
             -g VH124=CCATCTCATCCCTGCGTGTCTCCGACTCAGCAGCAGCTACAGGCACCCACGC \
             -g VH169=CCATCTCATCCCTGCGTGTCTCCGACTCAGGGCAGCAGCTACAGGTGTCCAGTCC \
             --discard-untrimmed -m 300 -o ./data/SRR654169.p.fastq -O 10 -e 0.3 \
             ./data/SRR654169.fastq
    
    cutadapt -g VH35L=CCATCTCATCCCTGCGTGTCTCCGACTCAGAAGGTGTCCAGTGTGARGTGCAG \
             -g VH3L1=CCATCTCATCCCTGCGTGTCTCCGACTCAGGCTATTTTAAAAGGTGTCCAATGT \
             -g VH34L1=CCATCTCATCCCTGCGTGTCTCCGACTCAGGTGGCAGCTCCCAGATGGGTCCTGTC \
             -g VH34L3=CCATCTCATCCCTGCGTGTCTCCGACTCAGGTTGCAGTTTTAAAAGGTGTCCAGTG \
             --discard-untrimmed -m 300 -o ./data/SRR654171.p.fastq -O 10 -e 0.3 \
             ./data/SRR654171.fastq
    

High-throughput sequencing data generally contains low qualities reads.
We use 
`Trimmomatic <http://www.usadellab.org/cms/?page=trimmomatic>`_
to removed the low quality reads.


.. code-block:: bash
    
    fastqc ./data/SRR654169.p.fastq -o ./data/ -q --nogroup
    fastqc ./data/SRR654171.p.fastq -o ./data/ -q --nogroup
    
    trimmomatic SE -phred33 ./data/SRR654169.p.fastq ./data/SRR654169.qc.fastq TRAILING:30 MINLEN:300
    trimmomatic SE -phred33 ./data/SRR654171.p.fastq ./data/SRR654171.qc.fastq TRAILING:30 MINLEN:300
    
    fastqc ./data/SRR654169.qc.fastq -o ./data/ -q --nogroup
    fastqc ./data/SRR654171.qc.fastq -o ./data/ -q --nogroup


After trimming of low quality bases and removing low short sequences,
we convert FASTQ format file to FASTA format file
with :command:`awk` and "command:`sed` commands.


.. code-block:: bash
    
    awk 'NR % 4 == 1 || NR % 4 == 2' ./data/SRR654169.qc.fastq | sed -e 's/^@/\>/' > ./data/SRR654169.fa
    awk 'NR % 4 == 1 || NR % 4 == 2' ./data/SRR654171.qc.fastq | sed -e 's/^@/\>/' > ./data/SRR654171.fa





Analysis
^^^^^^^^

As mentioned above, pydair parse was used to assign VDJ genes and define CDR3 sequences. Analysis results were summarized via pydair stats. All the summarized data are saved into results directory with prefix stats.

We use :command:`pydair parse` command to assign VDJ genes and determine CDR3 sequence.


.. code-block:: bash
    
    pydair parse -q ./data/SRR654169.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o ./results/SRR654169
    pydair parse -q ./data/SRR654171.fa \
                 -v ./db/human.ighv.fa -d ./db/human.ighd.fa -j ./db/human.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o ./results/SRR654171


Then, we use :command:`pydair stats` command to summarize the analysis results.
All summarized data are saved into :file:`results` directory with prefix `stats`.
and the summarized report were created (:download:`humanhiv_report.html`).


.. code-block:: bash
    
    pydair stats -i ./results/SRR654171.vdj.pydair ./results/SRR654169.vdj.pydair \
                 -n N152 IAVI84 \
                 -o ./results/stats \
                 --contain_ambiguous_D \
                 --all_seq \
                 --estimate-vdj-combination










Analysis of mouse heavy chain
=============================

The datasets contains two mice of C57BL/6 and BALB/c.
Data is from [#Collins2015]_].

First, we use :command:`git clone` command to download
the case study set that consists of
human germline genes in FASTA format from
`GitHub PyDAIR repository <https://github.com/bioinfoteam/PyDAIR>`_.


.. code-block:: bash
    
    git clone git@github.com:bioinfoteam/PyDAIR.git


The data are saved in :file:`PyDAIR/casestudies/mouse`.
We use :command:`cd` command to go to :file:`hiv` directory.


.. code-block:: bash
    
    cd PyDAIR/casestudies/mouse



Preparation
^^^^^^^^^^^


Before analysis, we create BLAST database with human
germline gene sequences using :command:`makeblastdb`.


.. code-block:: bash
    
    cd db
    makeblastdb -in mouse.ighv.fa -out vdb -dbtype nucl -parse_seqids
    makeblastdb -in mouse.ighd.fa -out ddb -dbtype nucl -parse_seqids
    makeblastdb -in mouse.ighj.fa -out jdb -dbtype nucl -parse_seqids
    cd ../



.. code-block:: bash
    
    wget -c ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR849/ERR849859/ERR849859.fastq.gz
    wget -c ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR849/ERR849860/ERR849860.fastq.gz
    gunzip ERR849859.fastq.gz
    gunzip ERR849860.fastq.gz

High-throughput sequencing data generally contains low qualities reads.
We use 
`Trimmomatic <http://www.usadellab.org/cms/?page=trimmomatic>`_
to removed the low quality reads.


.. code-block:: bash
    
    fastqc ./data/ERR849859.fastq -o ./data/ -q --nogroup
    fastqc ./data/ERR849860.fastq -o ./data/ -q --nogroup
    
    trimmomatic SE -phred33 ./data/ERR849859.fastq ./data/ERR849859.qc.fastq HEADCROP:10 TRAILING:20 MINLEN:100
    trimmomatic SE -phred33 ./data/ERR849860.fastq ./data/ERR849860.qc.fastq HEADCROP:10 TRAILING:20 MINLEN:100
    
    fastqc ./data/ERR849859.qc.fastq -o ./data/ -q --nogroup
    fastqc ./data/ERR849860.qc.fastq -o ./data/ -q --nogroup


After trimming of low quality bases and removing low short sequences,
we convert FASTQ format file to FASTA format file
with :command:`awk` and "command:`sed` commands.


.. code-block:: bash
    
    awk 'NR % 4 == 1 || NR % 4 == 2' ./data/ERR849859.fastq | sed -e 's/^@/\>/' > ./data/ERR849859.fa
    awk 'NR % 4 == 1 || NR % 4 == 2' ./data/ERR849860.fastq | sed -e 's/^@/\>/' > ./data/ERR849860.fa





Analysis
^^^^^^^^

As mentioned above, pydair parse was used to assign VDJ genes and define CDR3 sequences. Analysis results were summarized via pydair stats. All the summarized data are saved into results directory with prefix stats.

We use :command:`pydair parse` command to assign VDJ genes and determine CDR3 sequence.


.. code-block:: bash
    
    pydair parse -q ./data/ERR849859.fa \
                 -v ./db/mouse.ighv.fa -d ./db/mouse.ighd.fa -j ./db/mouse.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o ./results/ERR849859
    pydair parse -q ./data/ERR849860.fa \
                 -v ./db/mouse.ighv.fa -d ./db/mouse.ighd.fa -j ./db/mouse.ighj.fa \
                 --v-blastdb ./db/vdb --d-blastdb ./db/ddb --j-blastdb ./db/jdb \
                 -o ./results/ERR849860


Then, we use :command:`pydair stats` command to summarize the analysis results.
All summarized data are saved into :file:`results` directory with prefix `stats`.


.. code-block:: bash
    
    pydair stats -i ./results/ERR849859.vdj.pydair ./results/ERR849860.vdj.pydair \
                 -n ERR849859 ERR849860 \
                 -o ./results/stats \
                 --contain_ambiguous_D \
                 --estimate-vdj-combination
    






References
==========

.. [#Russ2015] Russ DE, Ho KY2, Longo NS3. HTJoinSolver: Human immunoglobulin VDJ partitioning using approximate dynamic programming constrained by conserved motifs. *BMC Bioinformatics* 2015, **16**\ :170. doi: `10.1186/s12859-015-0589-x <https://dx.doi.org/10.1186/s12859-015-0589-x>`_.
.. [#Zhu2013] Zhu J, Ofek G, Yang Y, Zhang B, Louder MK, Lu G, McKee K, Pancera M, Skinner J, Zhang Z, Parks R, Eudailey J, Lloyd KE, Blinn J, Alam SM, Haynes BF, Simek M, Burton DR, Koff WC; NISC Comparative Sequencing Program, Mullikin JC, Mascola JR, Shapiro L, Kwong PD. Mining the antibodyome for HIV-1-neutralizing antibodies with next-generation sequencing and phylogenetic pairing of heavy/light chains. *Proc Natl Acad Sci U S A.* 2013, **110**\ (16):6470-5. doi: `10.1073/pnas.1219320110 <https://dx.doi.org/10.1073/pnas.1219320110>`_.
.. [#Collins2015] Collins AM, Wang Y, Roskin KM, Marquis CP, Jackson KJ. The mouse antibody heavy chain repertoire is germline-focused and highly variable between inbred strains. *Philos Trans R Soc Lond B Biol Sci.* 2015, **370**\ (1676):20140236. dio: `10.1098/rstb.2014.0236 <https://dx.doi.org/10.1098/rstb.2014.0236>`_.



