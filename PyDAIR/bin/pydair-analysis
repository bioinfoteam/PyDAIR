#!/usr/bin/env python
from __future__ import division
import os
import sys
import argparse
import logging
import unittest
from PyDAIR.seq.IgSeq import IgSeq
from PyDAIR.io.PyDAIRIO import *
from PyDAIR.utils.PyDAIRUtils import *
from PyDAIR.utils.PyDAIRArgs import *
from PyDAIR.app.PyDAIRAPP import *
from PyDAIR.stats.PyDAIRStats import *
from PyDAIR.plot.PyDAIRPlot import *



def main(args):
    #population_estimation = args.population_estimation
    
    pydair_files  = args.input[0]
    sample_names = args.name[0]
    
    logging.info('[1/4] Read data files.')
    pydair_args = PyDAIRStatsArgs(sample_names, pydair_files,
                                contain_ambiguous_D = args.contain_ambiguous_D,
                                contain_stopcodon = args.contain_stopcodon,
                                output_prefix = args.output,
                                figure_format = args.figure_format,
                                figure_style = args.figure_style)
    pydairapp = PyDAIRAPPStats(pydair_args)
    
    logging.info('[2/4] Write statistical data.')
    pydairapp.write_freq()
    pydairapp.write_cdr3_len_freq()
    
    
    logging.info('[3/4] Plotting.')
    fig_freq_v = pydair_args.output_prefix + '_freq_v.' + pydair_args.figure_format
    fig_freq_d = pydair_args.output_prefix + '_freq_d.' + pydair_args.figure_format
    fig_freq_j = pydair_args.output_prefix + '_freq_j.' + pydair_args.figure_format
    fig_cdr3_len = pydair_args.output_prefix + '_cdr3_len_dist.' + pydair_args.figure_format
    pydairapp.plots.barplot_freq(gene = 'v', fig_name = fig_freq_v, fig_format = pydair_args.figure_format)
    pydairapp.plots.barplot_freq(gene = 'd', fig_name = fig_freq_d, fig_format = pydair_args.figure_format)
    pydairapp.plots.barplot_freq(gene = 'j', fig_name = fig_freq_j, fig_format = pydair_args.figure_format)
    pydairapp.plots.hist_cdr3_len(fig_name = fig_cdr3_len, xlim = [5, 40], prob = True)

    logging.info('[4/4] Finishing...')


def parse_args():
    desc = '''
PyDAIR: Python library for Diversity Analysis of Immune Repertoire.
'pydair-analysis' command calculates the frequence of usages of V, D, and J genes. In addition, it seek the CDR-H3 region.
'''


    parser = argparse.ArgumentParser(description = 'pydair')
    
    ## general parameters
    parser.add_argument('-i', '--input', help = 'Input PyDAIR files. Multiple files should be separated by a blank.', nargs = '*', action = 'append', required = True)
    parser.add_argument('-n', '--name',  help = 'Sample names for each PyDAIR file. Multiple names should be separated by a blank.', nargs= '*', action = 'append', required = True)
    parser.add_argument('-o', '--output', help = 'Path to file for writing anaysis results.', required = True)
    parser.add_argument('--contain_ambiguous_D', help = 'Contain immunoglobulin heavy chain sequences that has unidentifiable D genes when calculating the frequencies.', action = 'store_true')
    parser.add_argument('--contain_stopcodon',   help = 'Contain immunoglobulin heavy chain sequences that has stop codons when calculating the frequencies.',            action = 'store_true')
    parser.add_argument('--figure-format',   help = 'Format of figures.', default = 'png')
    parser.add_argument('--figure-dpi',      help = 'DPI of figures',     default = 300)
    parser.add_argument('--figure-style',    help = 'Stylesheet of figures', choices = ['classic', 'ggplot', 'fivethirtyeight'], default = 'ggplot')
    parser.add_argument('--estimate-cdr3-population', help = 'Estimation of CDR-H3 population sizes by sampling-resampling study.', action = 'store_true')
    parser.add_argument('--estimate-vdj-combination', help = 'Estimation of the numbers of VDJ combinations by rarefaction study.', action = 'store_true')
    
    parser.set_defaults(contain_ambiguous_D      = False)
    parser.set_defaults(contain_stopcodon        = False)
    parser.set_defaults(estimate_cdr3_population = False)
    parser.set_defaults(estimate_vdj_combination = False)

    # start main function
    args = parser.parse_args()
    return args



if __name__ == '__main__':
    desc = '''
Starting to aggregate data ...
                                         ______
                             <><        /      \  /
                O        <><           / O      \/
              O            <><         \        /\\
        _    o  ___                     \______/  \\
       /o\/    /o  \/         O O     __
       \_/\    \___/\           O   \/ o\\
             _            __   O    /\__/      __
            /o\/        \/ o\ o               /o \/
            \_/\        /\__/     ><>         \__/\\

'''
    print(desc)
    args = parse_args()
    main(args)






